type Include<T, U> = T extends U ? T : never;
export function assertIsElement(value: any): Include<typeof value, Element>;
export function assertIsHtmlElement(value: any): Include<typeof value, HTMLElement>;
export function assertIsHtmlElementOfType<T>(value: any, tagName: TagName<T>): T;
export function assertIsHtmlAnchorElement(value: any): Include<typeof value, HTMLAnchorElement>;
export function assertIsHtmlButtonElement(value: any): Include<typeof value, HTMLButtonElement>;
export function assertIsHtmlLinkElement(value: any): Include<typeof value, HTMLLinkElement>;
export function assertIsHtmlImageElement(value: any): Include<typeof value, HTMLImageElement>;
export function assertIsHtmlAudioElement(value: any): Include<typeof value, HTMLAudioElement>;
export function assertIsHtmlVideoElement(value: any): Include<typeof value, HTMLVideoElement>;
export function assertIsHtmlInputElement(value: any): Include<typeof value, HTMLInputElement>;
export function assertIsHtmlTextAreaElement(value: any): Include<typeof value, HTMLTextAreaElement>;
export function assertIsHtmlCanvasElement(value: any): Include<typeof value, HTMLCanvasElement>;
export function assertIsHtmlEmbedElement(value: any): Include<typeof value, HTMLEmbedElement>;
export function assertIsHtmlFormElement(value: any): Include<typeof value, HTMLFormElement>;
export function assertIsHtmlFrameElement(value: any): Include<typeof value, HTMLFrameElement>;
export function assertIsHtmlIFrameElement(value: any): Include<typeof value, HTMLIFrameElement>;
export function assertIsHtmlObjectElement(value: any): Include<typeof value, HTMLObjectElement>;
export function assertIsHtmlScriptElement(value: any): Include<typeof value, HTMLScriptElement>;
import { TagName } from "../dom/tagname.js";
